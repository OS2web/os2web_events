<?php
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\os2web_events\Form\SettingsForm;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Implements hook_preprocess_paragraph().
 *
 * Adding events block paragraph.
 */
function os2web_events_preprocess_paragraph__os2web_events(&$variables) {
  if ($variables['view_mode'] == 'preview') {
    return;
  }

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $category_values = $paragraph->field_os2web_events_par_category->getValue();

  $category_targets = [];
  foreach ($category_values as $value) {
    $category_targets[] = $value['target_id'];
  }

  $categories = implode(',', $category_targets);

  // Fallback for a default one.
  if (!$categories) {
    $categories = 'all';
  }

  $variables['content'] = views_embed_view('os2web_events', 'os2web_events_embed_limited', $categories);
}

/**
 * Implements hook_preprocess_paragraph().
 *
 * Adding event search form into paragraph.
 */
function os2web_events_preprocess_paragraph__os2web_events_search(&$variables) {
  $variables['content'] = views_embed_view('os2web_events_search', 'os2web_events_embed_search');
}

function os2web_events_cron() {

  $old_event_handle_method = \Drupal::config(SettingsForm::$configName)
    ->get('old_events_handle');

  $nids = \Drupal::entityQuery("node")
    ->accessCheck(false)
    ->condition('type', 'os2web_event')
    ->execute();

  $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
  $nodes = $storage_handler->loadMultiple($nids);

  foreach ($nodes as $idx => $node) {
    $end_date = NULL;

    if ($node->hasField('field_os2web_event_end_date')) {
      $end_date = $node->field_os2web_event_end_date->value;

      if (is_string($end_date) && !empty($end_date)) {
        $end_date = DrupalDateTime::createFromTimestamp(strtotime($end_date));

      }
      elseif (is_array($end_date)) {
        $end_date = array_pop($end_date);
        if ($end_date && isset($end_date['value'])) {
          $end_date = DrupalDateTime::createFromTimestamp(strtotime($end_date['value']));
        }
      }
    }

    if ($end_date) {
      $current_date = new DrupalDateTime('now');
      if ($end_date < $current_date) {

        if ($old_event_handle_method == "1") {
          // Delete node
          $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
          $storage_handler->delete([$node]);
        }
        else {
          // Unpublish node
          if ($node->isPublished()) {
            $node->setpublished(false);
            $node->setUnpublished();
            $node->save();
          }
        }
      }
    }
  }
  
}
